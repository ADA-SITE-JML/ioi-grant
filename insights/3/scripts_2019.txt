Insights 3 - 2019:

Finds how much time each participant spend for each task before swithcing to another task.
DAY 1 -> contest_id = 2
DAY 2 -> contest_id = 1
==========================================================================================
SELECT
participation_id,
user_id,
team,
medal,
abs_score,
full_name,
name AS task_name,
contest_id,
last_submission_ts,
count AS consecutive_submission_count,
CASE
WHEN contest_id = 2 THEN last_submission_ts - lag(last_submission_ts,1,(SELECT start FROM contests WHERE id = 2)) OVER (PARTITION BY participation_id ORDER BY last_submission_ts)
ELSE last_submission_ts - lag(last_submission_ts,1,(SELECT start FROM contests WHERE id = 1)) OVER (PARTITION BY participation_id ORDER BY last_submission_ts)
END AS time_spent_for_the_task
FROM
(SELECT t3.*, rs.abs_score, (select code from teams ts where rs.country = ts.name) as team, rs.full_name
FROM (SELECT 
participation_id,
min(user_id) AS user_id,
min(name) AS name,
min(contest_id) AS contest_id,
max(timestamp) AS last_submission_ts,
min(medal) AS medal,
count(*)
FROM
(SELECT t1.*,
SUM(group_flag) over (PARTITION BY participation_id ORDER BY timestamp) as grp
FROM
(SELECT *,
CASE
WHEN lag(name) OVER (PARTITION BY participation_id ORDER BY timestamp) = name THEN null
ELSE 1
END AS group_flag
FROM
(SELECT s.id as submission_id, s.participation_id, min(p.user_id) AS user_id, min(p.medal) AS medal, s.timestamp, s.task_id, min(t.name) AS name, min(t.contest_id) AS contest_id
FROM submissions s 
INNER JOIN tasks t
ON s.task_id = t.id
INNER JOIN (SELECT p.id AS participation_id, u.id AS user_id, u.medals AS medal FROM participations p INNER JOIN users u ON p.user_id = u.id) p
ON s.participation_id = p.participation_id
WHERE 
(
(s.timestamp >= (SELECT start FROM contests WHERE id = 2)
AND s.timestamp <= (SELECT stop FROM contests WHERE id = 2))
OR 
(s.timestamp >= (SELECT start FROM contests WHERE id = 1)
AND s.timestamp <= (SELECT stop FROM contests WHERE id = 1))
)
AND s.official = TRUE
GROUP BY s.id
ORDER BY s.timestamp) subs) t1) t2
GROUP BY grp, participation_id) t3
LEFT JOIN results rs
ON t3.user_id = rs.user_id) t4
ORDER BY user_id, last_submission_ts;

================================================================================
outliers - submitted in less than 3 minutes and more than 2 hours
temp2 is the table created out of the output of the above sql script.
================================================================================
select * from temp2 where (now() + time_spent_for_the_task < now() + interval '3' minute) or (now() + time_spent_for_the_task > now() + interval '2' hour) order by time_spent_for_the_task;




