dInsights 3 - 2019 DAY 1:

Finds how much time each participant spend for each task before swithcing to another task.
===================================================================
SELECT
participation_id,
medal,
user_id,
name AS task_name,
last_submission_ts,
count AS consecutive_submission_count,
last_submission_ts - lag(last_submission_ts,1,(SELECT start FROM contests WHERE id = 2)) OVER (PARTITION BY participation_id ORDER BY last_submission_ts) AS time_spent_for_the_task
FROM
(SELECT 
participation_id,
min(user_id) AS user_id,
min(name) AS name,
max(timestamp) AS last_submission_ts,
min(medal) AS medal,
count(*)
FROM
(SELECT t1.*,
SUM(group_flag) over (PARTITION BY participation_id ORDER BY timestamp) as grp
FROM
(SELECT *,
CASE
WHEN lag(name) OVER (PARTITION BY participation_id ORDER BY timestamp) = name THEN null
ELSE 1
END AS group_flag
FROM
(SELECT s.id as submission_id, s.participation_id, min(p.user_id) AS user_id, min(p.medal) AS medal, s.timestamp, s.task_id, (select name from tasks where id = s.task_id)
FROM submissions s 
INNER JOIN (SELECT p.id AS participation_id, u.id AS user_id, u.medals AS medal FROM participations p INNER JOIN users u ON p.user_id = u.id) p
ON s.participation_id = p.participation_id
WHERE s.timestamp >= (SELECT start FROM contests WHERE id = 2)
AND s.timestamp <= (SELECT stop FROM contests WHERE id = 2)
AND s.official = TRUE
GROUP BY s.id
ORDER BY s.timestamp) subs) t1) t2
GROUP BY grp, participation_id
ORDER BY user_id) t3;





